alias bcompare='bcomp'
alias ne='node exam'
alias nm='node manifest'
alias nt='node topics'
alias gurp='gars && gulp'
alias grnt='gart && nt && rm topics.js'
alias gRe='git rebase origin/english'
# alias rocky='./cntlm -H -c cntlm.ini && vi cntlm.ini'

##################################### DOCKER #####################################

# alias dcu='cmd <<< "docker compose up -d"'  # working in git bash now
# alias dcd='cmd <<< "docker compose down"'  # working in git bash now

##################################### GIT #####################################

# Set a environment variable for the repository
# repo=/c/workspace/repository/git # works with submodules on msys2, and git bash, but not with depth parameter for local repos
repo=file:///c/workspace/repository/git # works with depth parameter for local repos, and with gitbash, but not with submodules on msys2

# Repos
alias gcla='git clone $repo/assembly.git'
alias gclar='git clone --recursive --local $repo/assembly.git'
alias gclp='git clone $repo/package.git'
alias gclc='git clone $repo/csod-package.git'
alias gclm='git clone $repo/manifest.git'
alias gcls='git clone $repo/scripts.git'
alias gcln='git clone $repo/newdealer.git'
alias gcle='git clone $repo/exam.git'
alias gclv='git clone $repo/lev.git'
alias gcrp=clone_package_rebase
alias gcrm=clone_manifest_rebase
alias gcra=autoshell_package

# Stellantis
alias gces='git config user.email "alok.mishra@stellantis.com"'

# Archive / Extract
alias gars='git archive --remote=$repo/scripts.git master | tar -xv storyline/ --strip-components=1'
alias gart='git archive --remote=$repo/manifest.git master | tar -xv topics.js'

# Migrate CSOD
alias ganm='git archive --remote=$repo/manifest.git master | tar -xv csod/migrate.js && node csod/migrate csod-package && rm -rf csod'

## gcrp
clone_package_rebase() {
    if [[ ($# -eq 0 || "$1" = "." ) && ("$PWD" =~ Package ||  "$PWD" =~ package) ]]; then
        # git clone $repo/package.git . || read -p "... Press enter to dismiss ..."
        git clone --depth 1 $repo/package.git . || read -p "... Press enter to dismiss ..."
        dir="."
    else
        if [ "$2" = "." ]; then
            dir="."
        else
            dir=${1^}
        fi

        if [ "$1" = "english" ]; then
            branch="english"
        else
            branch=${1}
        fi

        if [[ $# -ne 0 && "$1" != "." ]]; then
            git clone $repo/package.git -b $branch $dir || read -p "... Press enter to dismiss ..."
        else
            read -p "You aren't in a Package directory ... Press enter to dismiss ..."
            exit
        fi
    fi

    cd $dir

    if [ -f zip-package.bat ]; then
        git rebase origin/master
        rm -rf .git*  *.css *.js package*.json manifest
        code . -g zip-package.bat:4:13
    fi

    exit
}

## gcrm
clone_manifest_rebase() {
    if [[ $# -ne 0 ]]; then
        if [ "$2" = "." ]; then
            dir="."
        else
            dir=${1^}
        fi

        if [ "$1" = "english" ]; then
            branch="master"
        else
            branch=${1}
        fi

        mkdir $dir
        cd $dir

        git clone $repo/manifest.git -b $branch
    else
        git clone $repo/manifest.git
    fi

    cd manifest
    git rebase origin/master
    code . -g manifest.json:2:29
    exit
}


##################################### DEV #####################################

alias 7x=extract_to_folder
extract_to_folder() {
    7z x -y -o$1 $1.7z;
    find $1 -type d -exec chmod 755 {} \;
}

# Pass multiple files for scp to newdealer i.e:
# scpnd 2016 q2 file1.7z file2.7z ...
alias scpnd=send_to_newdealer
send_to_newdealer() {
    if [[ $# -eq 0 ]]; then
        echo "Usage: scpnd 2016 q2 package1.7z package2.7z ..."
        return
    fi

    scp ${@:3} dev:/var/www/dev/newdealer/$1/$2/
}

alias swatch=sass_watch
sass_watch() {
    sass --watch $1 $2
}

autoshell_package() {
    "C:\Program Files\7-Zip\7z.exe" x "C:\workspace\CACreative\Operations\3_Templates and Job Aids\4 Production\Packages\SL360 Package\AUTOSHELL.zip"
}
interim_package() {
    cp -r "C:\workspace\CACreative\Operations\3_Templates and Job Aids\4 Production\Packages\CSOD Packages\CSOD New Courses\csod-interim-package" .
}

csod_migrate_exe() {
    cp "C:\workspace\CACreative\Operations\3_Templates and Job Aids\4 Production\Packages\CSOD Packages\CSOD New Courses\migrate-to-csod.exe" . && ./migrate-to-csod && rm ./migrate-to-csod.exe
}

# Execute from an immediate directory within a project via Beyond Compare
archive_project() {
    cd ..

    if [[ "${PWD:1:1}" != "c" ]]; then
        echo "Sorry, you need to be in your local machine's project folder!"
        sleep 2
        return
    fi

    project="${PWD##*/}"

    if [[ $project =~ ^[0-9]{2}-[0-9]{3} ]]; then

        echo "Removing excess ..."
        rm -rf "2 Design"
        rm -rf "3 Development"
        rm -rf "4 Production/Assembly"
        rm -rf "4 Production/Interactive Assembly"
        rm -rf "4 Production/Interactive Package/content"
        rm -f  "4 Production"/*.zip
        rm -f "$project".7z

        echo "Archiving \"$project\" ..."
        "C:\Program Files\7-Zip\7z.exe" a "$project".7z -xr!.git -xr!node_modules -xr!*.pdf -xr!*.zip .
        "C:\Program Files\7-Zip\7z.exe" l "$project".7z
        manifests=$("C:\Program Files\7-Zip\7z.exe" l "$project".7z  | grep 'manifest\\manifest.json' | tr -s ' ' | cut -d ' ' -f 4)

        for size in $manifests; do
            if [[ $size -gt 600 ]]; then
                archived=true;
                echo "This manifest in the archive looks good!"
            else
                archived=false;
                echo ""
                read -p "Not removing Production, a manifest file seems too small ... Press enter to dismiss ..."
                exit
            fi
        done

        if [[ $archived = true ]]; then
            echo "Removing Production ..."
            rm -rf "4 Production"
        else
            read -p "Manually remove this non-standard project. .... Press enter to dismiss ..."
            exit
        fi

    else
        read -p "\"$project\" is not a valid project! ... Press enter to dismiss ..."
    fi
}

# Sync local repo with gitlab cloud repo
alias glsync='gitlab_repo_sync'
gitlab_repo_sync() {
    git clone $repo/$1.git
    cd $1
    trackall
    git pull --all
    git remote add gitlab git@gitlab.com:stellantispi/$1.git
    git fetch --all
    git branch -a
    echo "====== Proceed after force pushing is allowed on GitLab repo! ======"
    git push gitlab --force --all
    cd ..
}

alias story='check_story_incomplete'
check_story_incomplete() {
    echo -e "\nProject path?\n"
    if read -rp "" project_path; then
        project_path=$(echo "$project_path" | sed 's/W:/U:/')

        if [ -d "$project_path" ]; then
            story_path="$project_path/4 Production/Interactive Package/content/en/html/js/"
            file_path="$project_path/4 Production/Interactive Package/content/en/html/js/story.js"
            if [ -f "$file_path" ]; then
                if grep -q "Incomplete" "$file_path"; then
                    echo -e "\nFOUND: Incomplete Status"
                else
                    echo -e "\nMISSING: Incomplete Status"
                    cd "$story_path"
                fi
            else
                echo "File does not exist: $file_path"
            fi
        else
            cd "$project_path"
        fi
    else
        echo "That path doesn't exist! Are you connected to VPN?"
    fi
}

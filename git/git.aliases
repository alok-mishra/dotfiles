# Common
alias g='git status'
alias gi='git init'
alias gib='git init --bare'
alias gg='git status --ignored'
alias gy='files_modified_before_today'
files_modified_before_today() {
    git status | while read mode file; do
        if [ -e "$file" ]; then
            modification_date=$(stat -c %Y "$file")
            yesterday_date=$(date -d yesterday +%s)
            if [ "$modification_date" -lt "$yesterday_date" ]; then
                echo "$file $(stat -c %y "$file")"
            fi
        fi
    done
}

alias ga='git add'
alias gaa='git add --all'
alias gaf='git add --force'
alias gcu='git config user.name && git config user.email'

alias gig='git update-index --no-skip-worktree' # unignore file from being indexed
alias gIg='git update-index --skip-worktree'    # ignore file from being indexed

# Remotes
alias gr='git remote'
alias grv='git remote -v'
alias gra='git remote add'
alias grr='git remote rename'
alias gru='git remote set-url'
alias grD='git remote rm'
alias grP='git fetch --prune'

# Logs
alias gl='git log --pretty=format:"%C(auto)%h %C(cyan)%ad %C(auto)%s %d" --date=short -6'
alias glz='git log --pretty=format:"%C(auto)%h %C(magenta)%ad %C(auto)%s %d" --date=short | fzf --ansi' # fuzzy search
alias gld='git log --pretty=format:"%C(auto)%h %C(magenta)%<(10,trunc)%an %C(cyan)%ad %C(auto)%s %d" --date=short'
# alias glo='git log --oneline'
alias glg='git log --oneline --graph'
alias gla='git log --oneline --graph --all --decorate'

# Clone
alias gcl='git clone'
alias gcl1='git clone --depth 1'

# Branch / Checkout
alias gb='git branch'
alias gba='git branch --all'
alias gbl="git for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(align:width=30)%(color:bold yellow)%(refname:short)%(end)%(color:reset) %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'"
alias gbu='git branch -u'               # set upstream branch
alias gbv='git branch --verbose'        # show last commit on branch
alias gbD='git branch --delete --force' # delete local branch
alias gbm='git branch --move'           # rename local branch
alias gbrD='git push origin --delete'
alias gbDR='delete_local_and_remote_branch'
delete_local_and_remote_branch() {
    git branch -D $1
    git push origin --delete $1
}

alias gch='git checkout'
# alias gch~='git checkout @{-1}'                           # checkout previous branch
# alias gchz='git branch --list | fzf | xargs git checkout' # fuzzy search branch and checkout
# alias gchb='git checkout -b'
# alias gchd='git checkout develop'
# alias gchm='git_checkout_default'
# git_checkout_default() { git checkout master || git checkout main; }

alias gs='git switch'
alias gs~='git switch @{-1}'                           # switch to previous branch
alias gsz='git branch --list | fzf | xargs git switch' # fuzzy search branch and switch
alias gsB='git switch -c'
alias gsd='git switch develop'
alias gsm='git_switch_default'
git_switch_default() { git switch main 2>/dev/null || git switch master; }
alias gsr='git switch master'
alias gsn='git switch main'

# Worktree
alias gwl='git worktree list'
alias gwa='git_worktree_add'
git_worktree_add() { git worktree add ".git-worktrees/$1"; }
alias gwd='git_worktree_diff'
git_worktree_diff() { bc . ".git-worktrees/$1" } # don't add &, or no diffs will be found
alias gwR='git worktree remove'
alias gwP='git worktree prune'

# Diff / Show
alias gd='git diff'
alias gdc='git diff --cached'
alias gdn='git diff --name-status'
alias gdm='git diff origin/master'
alias gdd='git diff develop'
alias gd~='git diff HEAD~'
alias gd~b='git diff @{-1}' # diff current branch with previous branch
alias gdo='git_diff_origin_branch'
git_diff_origin_branch() { git diff origin/$1; }
alias gss='git show --stat $1'

alias gdt='git difftool --dir-diff --no-symlink'

# Reset / Clean
alias g.RH='git reset --hard HEAD'
alias g~RS='git reset --soft HEAD~1'
alias g~RM='git reset --mixed HEAD~1'
alias g~RH='git reset --hard HEAD~1'
alias g~R9='git reset --hard HEAD~9'
alias gmRH='git reset --hard origin/master'

alias gCn='git clean -d --dry-run'
alias gCf='git clean -d --force'

alias gS='git stash'
alias gSl='git stash list'
alias gSp='git stash pop'
alias gSd='git stash show -p' # show diff of stash
alias gSD='git stash drop'
alias cache='git rm -r --cached .'  # remove files from cache

# Fetch / Merge / Pull / Rebase / Push
alias gf='git fetch'
alias gp='git pull'
alias gpF='git_rebase_remote_branch origin $(git branch --show-current)' # force pull
alias gpR='git pull --rebase'
alias gP='git push --follow-tags'
alias gPF='git push --force'

alias gPu='push_upstream'
push_upstream() {
    if [ $# -eq 0 ]; then
        remote="origin"
    else
        remote=${1}
    fi
    git push --set-upstream $remote $(git branch --show-current)
}

# Sync local repo with cloud repo
## Usage: glsync repo (trackall; pullall; git remote gitlab ...; fetchall; pushrall gitlab;)
alias showall='for remote in `git branch -r | grep -v "\->" | grep origin`; do echo ${remote#origin/} $remote; done;'
alias trackall='for remote in `git branch -r | grep -v "\->" | grep origin`; do git branch --track ${remote#origin/} $remote; done;'
alias fetchall='git fetch --all'
alias pullall='git pull --all'
alias pushrall='push_remote_all'
push_remote_all() { git push $1 --force --all; }

alias gM='git merge'
alias gMa='git merge --abort'
alias gMs='git merge --squash'
alias gMm='git merge master'
alias gmt='git mergetool'

alias gp1='git pull --depth 1'

alias gRa='git rebase --abort'
alias gRc='git rebase --continue'
alias gRs='git rebase --skip'
alias gR~='git rebase @{-1}' # rebase current branch on previous branch
alias gRb='git_rebase_branch'
git_rebase_branch() { git rebase $1; }
alias gRS='git_rebase_squash'
git_rebase_squash() {
    git log --oneline
    echo "Enter the commit after the ones to squash. Rename 'pick' to 'squash' or 'fixup', except first to 'reword' (p,s,f,r)."
    read commit
    echo "Rebasing everything before $commit!"
    git rebase --interactive $commit
}

alias gRd='git rebase develop'
alias gRm='git rebase master'
alias gRn='git rebase main'
alias gRrb='git_rebase_remote_branch'
git_rebase_remote_branch() {
    git fetch $1 $2
    git rebase $1/$2
}

# Remove sensitive and binary files from list git history. Push force all branches afterwards.
git_remove_filter_branch() {

    # [Git Filter Branch](https://help.github.com/en/github/authenticating-to-github/removing-sensitive-data-from-a-repository#using-filter-branch)
    git filter-branch --force --index-filter "git rm --cached --ignore-unmatch $1" --prune-empty --tag-name-filter cat -- --all

    # Multiple:
    # git filter-branch --force --index-filter 'git rm --cached --ignore-unmatch data/document.*; git rm --cached --ignore-unmatch tables.*' --prune-empty -- --all

    ## After removal (only affects local repo):
    git for-each-ref --format='delete %(refname)' refs/original | git update-ref --stdin
    git reflog expire --expire=now --all
    git gc --prune=now

    ## Force push all, and also if there are tags:
    # git push origin --force --all
    # git push origin --force --tags
}
alias gRfb='git_remove_filter_branch'

# Commit
alias gcm='git commit -m'
alias gce='git commit --allow-empty -m "~"'
alias gCm='git commit -am'
alias gcA='git commit --amend'
alias gcAm='git commit --amend -m'
alias gcv='git commit --verbose --all'

# Cherry Pick
alias gCp='git cherry-pick $1'
alias gCc='git cherry-pick --continue'
alias gCa='git cherry-pick --abort'


# Tag
alias gt='git tag'
alias gtl='git tag --list -n' # list tags
alias gtd='git tag -d' # delete tag
alias gts='git show'
alias gtm='git_tag_message'
git_tag_message() { git tag -a "$1" -m "$2"; }

# Submodules
alias gB='git submodule'
alias gBab='git submodule add -b'
alias gBi='git submodule update --init --recursive --remote'
alias gBu='git submodule set-url'
alias gBf='git submodule foreach --recursive'
alias gBp='git pull --recurse-submodules'
alias gBR='git_submodule_remove'
git_submodule_remove() {
    git rm $1
    rm -rf .git/modules/$1
    git config --remove-section submodule.$1
}

# Archive / Extract
alias gAr='git archive HEAD --format=zip > "../${PWD##*/}.zip"'
